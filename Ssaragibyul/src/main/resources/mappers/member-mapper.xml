<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	
	<!-- 맴버 -->
	<resultMap type="Member" id="memberResultMap">
		<id property="userId" column="USER_ID"></id>
		<result property="userPw" column="USER_PW"></result>
		<result property="nickName" column="NICKNAME"></result>
		<result property="userName" column="USER_NAME"></result>
		<result property="userEmail" column="USER_EMAIL"></result>
		<result property="userPhone" column="USER_PHONE"></result>
		<result property="userAddr" column="USER_ADDR"></result>
		<result property="birthday" column="BIRTHDAY"></result>
		<result property="enrollDate" column="ENROLL_DATE"></result>
		<result property="withdrawDate" column="WITHDRAW_DATE"></result>
		<result property="mCode" column="M_CODE"></result>
		<result property="mngNo" column="MNG_NO"></result>
	</resultMap>

	<!-- 독립유공자 -->
	<resultMap type="independence" id="independenceMap">
		<id property="independenceNo" column="MNG_NO"/>
		<result property="nameKo" column="NAME_KO"/>
		<result property="nameCh" column="NAME_CH"/>
		<result property="birthday" column="BIRTHDAY"/>
		<result property="lastday" column="LASTDAY"/>
		<result property="sex" column="SEX"/>
		<result property="registerLarge" column="REGISTER_LARGE_DIV"/>
		<result property="registerMid" column="REGISTER_MID_DIV"/>
		<result property="activityLine" column="ACTIVITY_LINE"/>
		<result property="prizeClass" column="PRIZED_CLASS"/>
		<result property="prizedYear" column="PRIZED_YEAR"/>
		<result property="achievement" column="ACHIEVEMENT_KO"/>
	</resultMap>
	
	<!-- 댓글 -->
	<resultMap type="com.ssaragibyul.member.domain.CommentAndProject" id="commentProjectResultMap">
		<id property="keyNo" column="KEY_NO"/>
		<result property="projectNo" column="PROEJCT_NO"/>
		<result property="commNo" column="COMM_NO"/>
		<result property="userId" column="USER_ID"/>
		<result property="commContents" column="COMM_CONTENTS"/>
		<result property="boardType" column="BOARD_TYPE"/>
		<result property="regDate" column="REG_DATE"/>
		<result property="subject" column="SUBJECT"/>
		<result property="projectCode" column="PROJECT_CODE"/>
	</resultMap>	

	<select id="selectOneMember" parameterType="Member" resultMap="memberResultMap">
		SELECT * FROM MEMBER
		WHERE USER_ID = #{userId } AND USER_PW = #{userPw } 
	</select>
	
	<select id="checkIdDup" resultType = "_int">
		SELECT COUNT(*) FROM MEMBER WHERE USER_ID = #{userId }
	</select>	
	
	<select id="refreshNick" resultMap="memberResultMap">
		WITH RANDOMTBL AS (SELECT * FROM (SELECT MNG_NO , NAME_KO AS NICKNAME FROM INDEPENDENCE LEFT OUTER JOIN MEMBER USING(MNG_NO) WHERE USER_ID IS NULL) ORDER BY DBMS_RANDOM.VALUE) SELECT * FROM RANDOMTBL WHERE ROWNUM = 1
	</select>
	
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER VALUES(#{userId},#{userPw},#{nickName},#{userName},#{userEmail},#{userPhone},#{userAddr},#{birthday},SYSDATE, SYSDATE, #{mCode},#{mngNo})
	</insert>
	
	<!-- 아이디 찾기 -->
 	<select id="idSearch"  parameterType="hashMap" resultType="String">
		SELECT * FROM MEMBER
		WHERE USER_NAME = #{userName } AND USER_EMAIL = #{userEmail } 
	</select>
	<!-- 비번 자동변경 -->
	<update id="newPassword" parameterType="Member">
		UPDATE MEMBER
		SET USER_PW = #{userPw}
		WHERE USER_EMAIL = #{userEmail } AND USER_ID = #{userId }
	</update>
	<!-- 비번 찾기 -->
	<select id="searchPw" resultType="String">
		SELECT USER_PW FROM MEMBER WHERE USER_ID = #{userId } AND USER_EMAIL = #{userEmail }
	</select>
	<!-- 사용자 정보 수정 -->
	<update id="modifyMember" parameterType="Member">
		UPDATE MEMBER SET USER_PW = #{userPw}, USER_NAME = #{userName}, USER_EMAIL = #{userEmail}, USER_PHONE = #{userPhone}, USER_ADDR = #{userAddr}  WHERE USER_ID = #{userId}
	</update>  

	<!-- 사용자: 회원 탈퇴 -->	
	<delete id="removeMember" parameterType="Member">
		DELETE MEMBER WHERE USER_ID = #{userId }
	</delete> 
	
	<!-- 독립 유공자 정보 마이페이지에 띄워주는 것 -->
 	<select id="myPageView"  parameterType="Independence" resultMap="independenceMap">
		SELECT *
		FROM INDEPENDENCE
		WHERE MNG_NO=(SELECT MNG_NO FROM MEMBER WHERE USER_ID = #{userId })
	</select>
	
	<!-- 관리자용 -->
	
	
	<!-- 관리자 확인용 -->
	<select id="selectListCount" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
    </select>
    
    <!-- 관리자 확인용 -->
    <select id="selectAllList" resultMap="memberResultMap">
     	SELECT * FROM MEMBER ORDER BY ENROLL_DATE DESC
   	</select>
	
  	<!-- 관리자 확인용 -->
	<select id="selectOne" parameterType="Member" resultMap="memberResultMap">
     	SELECT * FROM MEMBER
     	WHERE USER_ID = #{userId }
   	</select>

  	<!-- 관리자 확인용 -->
    <update id="deleteMember" parameterType="Member">
   		UPDATE MEMBER SET M_CODE = 2 WHERE USER_ID= #{userId }
    </update>
      
   	<!-- 관리자 확인용 -->
    <update id="updateMember" parameterType="Member">
    	UPDATE MEMBER SET USER_EMAIL= #{userEmail}, USER_PHONE=#{userPhone}, USER_ADDR=#{userAddr} WHERE USER_ID= #{userId }
    </update>
	
	<update id="updateRandomPw" parameterType="Member">
		UPDATE MEMBER SET USER_PW = #{userPw } WHERE USER_ID = #{userId } AND USER_EMAIL = #{userEmail }
	</update>
	
	<select id="selectDeleteMemberCount" resultType = "_int">
	   SELECT COUNT(*) FROM MEMBER WHERE M_CODE = 2
	</select>   

	<select id="selectNewMemberCount" resultType = "_int">
	   SELECT COUNT(*) FROM MEMBER WHERE TO_DATE(ENROLL_DATE, 'YY/MM/DD') = TO_DATE(SYSDATE,'YY/MM/DD')
	</select>   
	
	<select id="selectAllMemberCount" resultType = "_int">
	   SELECT COUNT(*) FROM MEMBER WHERE NOT M_CODE = 2 AND NOT M_CODE = 1
	</select>   
	
	<!--오재승꺼  -->
	<select id="seletOneMemberList" parameterType="Member" resultMap="memberResultMap">
	   SELECT * FROM MEMBER WHERE USER_ID = #{userId }
	</select>   

	<!-- 댓글관련 -->
	<select id="selectAllComments" parameterType="string" resultMap="commentProjectResultMap">
		SELECT ROWNUM AS KEY_NO, C.* FROM (SELECT F_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, ENROLL_DATE AS REG_DATE, SUBJECT, PROJECT_CODE FROM FUNDING_COMMENTS A LEFT OUTER JOIN FUNDING_PROJECT B USING(F_PROJECT_NO)
		UNION
		SELECT D_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, REG_DATE, SUBJECT, PROJECT_CODE FROM DONATION_COMMENTS A LEFT OUTER JOIN DONATION B USING(D_PROJECT_NO)
		UNION
		SELECT NULL AS PROJECT_NO, REPLY_NO AS COMM_NO, USER_ID, CONTENTS AS COMM_CONTENTS, '방문' AS BOARD_TYPE, REG_DATE, '별 보러 가자' AS SUBJECT, 0 AS PROJECT_CODE FROM VISIT_REPLY) C
		WHERE USER_ID=#{userId } ORDER BY REG_DATE DESC
	</select>
	<select id="selectCommentsCount" resultType="_int">
		SELECT COUNT(*) FROM (SELECT ROWNUM AS KEY_NO, C.* FROM (SELECT F_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, ENROLL_DATE AS REG_DATE, SUBJECT, PROJECT_CODE FROM FUNDING_COMMENTS A LEFT OUTER JOIN FUNDING_PROJECT B USING(F_PROJECT_NO)
		UNION
		SELECT D_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, REG_DATE, SUBJECT, PROJECT_CODE FROM DONATION_COMMENTS A LEFT OUTER JOIN DONATION B USING(D_PROJECT_NO)
		UNION
		SELECT NULL AS PROJECT_NO, REPLY_NO AS COMM_NO, USER_ID, CONTENTS AS COMM_CONTENTS, '방문' AS BOARD_TYPE, REG_DATE, '별 보러 가자' AS SUBJECT, 0 AS PROJECT_CODE FROM VISIT_REPLY) C
		WHERE USER_ID=#{userId })
	</select>
	
	<delete id="deleteComment" parameterType="map">
		<if test="boardType.toString() == '펀딩상세'">
			DELETE FROM FUNDING_COMMENTS WHERE COMM_NO=#{commNo}
		</if>
		<if test="boardType.toString() == '기부상세'">
			DELETE FROM DONATION_COMMENTS WHERE COMM_NO=#{commNo}
		</if>
		<if test="boardType.toString() == '방문'">
			DELETE FROM VISIT_REPLY WHERE REPLY_NO=#{commNo}
		</if>
	</delete>
	
	<update id="modifyComment" parameterType="map">
		<if test="boardType.toString() == '펀딩상세'">
			UPDATE FUNDING_COMMENTS SET COMM_CONTENTS=#{commContents} WHERE COMM_NO=#{commNo}
		</if>
		<if test="boardType.toString() == '기부상세'">
			UPDATE DONATION_COMMENTS SET COMM_CONTENTS=#{commContents} WHERE COMM_NO=#{commNo}
		</if>
		<if test="boardType.toString() == '방문'">
			UPDATE VISIT_REPLY SET CONTENTS=#{commContents} WHERE REPLY_NO=#{commNo}
		</if>
	</update>	
	
	<select id="selectSearchComments" resultMap="commentProjectResultMap">
		<choose>
			<when test="searchCondition.toString()=='all'">
				SELECT ROWNUM AS KEY_NO, C.* FROM (SELECT F_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, ENROLL_DATE AS REG_DATE, SUBJECT, PROJECT_CODE FROM FUNDING_COMMENTS A LEFT OUTER JOIN FUNDING_PROJECT B USING(F_PROJECT_NO)
				UNION
				SELECT D_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, REG_DATE, SUBJECT, PROJECT_CODE FROM DONATION_COMMENTS A LEFT OUTER JOIN DONATION B USING(D_PROJECT_NO)
				UNION
				SELECT NULL AS PROJECT_NO, REPLY_NO AS COMM_NO, USER_ID, CONTENTS AS COMM_CONTENTS, '방문' AS BOARD_TYPE, REG_DATE, '별 보러 가자' AS SUBJECT, 0 AS PROJECT_CODE FROM VISIT_REPLY) C WHERE USER_ID=#{userId }
			</when>		
			<when test="searchCondition.toString()=='펀딩상세'">
				SELECT F_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, ENROLL_DATE AS REG_DATE, SUBJECT, PROJECT_CODE FROM FUNDING_COMMENTS A LEFT OUTER JOIN FUNDING_PROJECT B USING(F_PROJECT_NO) WHERE A.USER_ID=#{userId } 
			</when>
			<when test="searchCondition.toString()=='기부상세'">
				SELECT D_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, REG_DATE, SUBJECT, PROJECT_CODE FROM DONATION_COMMENTS A LEFT OUTER JOIN DONATION B USING(D_PROJECT_NO) WHERE A.USER_ID=#{userId } 
			</when>
			<when test="searchCondition.toString()=='방문'">
				SELECT NULL AS PROJECT_NO, REPLY_NO AS COMM_NO, USER_ID, CONTENTS AS COMM_CONTENTS, '방문' AS BOARD_TYPE, REG_DATE, '별 보러 가자' AS SUBJECT, 0 AS PROJECT_CODE FROM VISIT_REPLY WHERE USER_ID=#{userId } 
			</when>
		</choose>
		ORDER BY REG_DATE DESC
	</select>
	<select id="selectSearchCommentsCount" resultType="_int">
		SELECT COUNT(*) FROM 
		<choose>
			<when test="searchCondition.toString()=='all'">
				(SELECT ROWNUM AS KEY_NO, C.* FROM (SELECT F_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, ENROLL_DATE AS REG_DATE, SUBJECT, PROJECT_CODE FROM FUNDING_COMMENTS A LEFT OUTER JOIN FUNDING_PROJECT B USING(F_PROJECT_NO)
				UNION
				SELECT D_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, REG_DATE, SUBJECT, PROJECT_CODE FROM DONATION_COMMENTS A LEFT OUTER JOIN DONATION B USING(D_PROJECT_NO)
				UNION
				SELECT NULL AS PROJECT_NO, REPLY_NO AS COMM_NO, USER_ID, CONTENTS AS COMM_CONTENTS, '방문' AS BOARD_TYPE, REG_DATE, '별 보러 가자' AS SUBJECT, 0 AS PROJECT_CODE FROM VISIT_REPLY) C
				WHERE USER_ID=#{userId })
			</when>
			<when test="searchCondition.toString()=='펀딩상세'">
				(SELECT F_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, ENROLL_DATE AS REG_DATE, SUBJECT, PROJECT_CODE FROM FUNDING_COMMENTS A LEFT OUTER JOIN FUNDING_PROJECT B USING(F_PROJECT_NO) WHERE A.USER_ID=#{userId })
			</when>
			<when test="searchCondition.toString()=='기부상세'">
				(SELECT D_PROJECT_NO AS PROEJCT_NO, COMM_NO, A.USER_ID, COMM_CONTENTS, BOARD_TYPE, REG_DATE, SUBJECT, PROJECT_CODE FROM DONATION_COMMENTS A LEFT OUTER JOIN DONATION B USING(D_PROJECT_NO) WHERE A.USER_ID=#{userId })
			</when>
			<when test="searchCondition.toString()=='방문'">
				(SELECT NULL AS PROJECT_NO, REPLY_NO AS COMM_NO, USER_ID, CONTENTS AS COMM_CONTENTS, '방문' AS BOARD_TYPE, REG_DATE, '별 보러 가자' AS SUBJECT, 0 AS PROJECT_CODE FROM VISIT_REPLY WHERE USER_ID=#{userId })
			</when>
		</choose>
	</select>
	
	<!-- 나혜님 -->
	<select id="selectSearchList" resultMap="memberResultMap">
      SELECT * FROM MEMBER
      <if test="searchCondition.toString() == 'id'">
         WHERE USER_ID LIKE '%' || #{searchValue} || '%'
         ORDER BY USER_ID
      </if>
      <if test="searchCondition.toString() == 'nickName'">
         WHERE NICKNAME LIKE '%' || #{searchValue} || '%'
         ORDER BY NICKNAME
      </if>
      <if test="searchCondition.toString() == 'name'">
         WHERE USER_NAME LIKE '%' || #{searchValue} || '%'
         ORDER BY USER_NAME
      </if>
      <if test="searchCondition.toString() == 'all'">
         WHERE USER_ID LIKE '%' || #{searchValue} || '%'
         OR NICKNAME LIKE '%' || #{searchValue} || '%'
         OR USER_NAME LIKE '%' || #{searchValue} || '%'
         ORDER BY USER_ID
      </if>
   </select>
	
</mapper>